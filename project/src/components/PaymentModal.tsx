import React, { useState } from 'react';
import { X, CreditCard, Banknote, Smartphone, QrCode } from 'lucide-react';
import { useApp } from '../contexts/AppContext';

const PaymentModal: React.FC = () => {
  const { state, dispatch } = useApp();
  const [paymentMethod, setPaymentMethod] = useState<'card' | 'cash' | 'pix'>('card');
  const [needsChange, setNeedsChange] = useState(false);
  const [changeAmount, setChangeAmount] = useState('');
  const [cardData, setCardData] = useState({
    number: '',
    name: '',
    expiry: '',
    cvv: ''
  });

  if (!state.isPaymentOpen) return null;

  const cartTotal = state.cart.reduce((total, item) => total + item.totalPrice, 0);
  const deliveryFee = 8.90;
  const finalTotal = cartTotal + deliveryFee;

  const generatePixQRCode = () => {
    // Simulated PIX QR Code - in real app, this would be generated by payment provider
    const pixCode = `00020126580014BR.GOV.BCB.PIX013636401234-5678-9012-3456-789012345678520400005303986540${finalTotal.toFixed(2)}5802BR5913HEYPIZZA'S6009SAO PAULO62070503***6304`;
    return `data:image/svg+xml;base64,${btoa(`
      <svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
        <rect width="200" height="200" fill="white"/>
        <rect x="20" y="20" width="160" height="160" fill="black"/>
        <rect x="30" y="30" width="140" height="140" fill="white"/>
        <rect x="40" y="40" width="120" height="120" fill="black"/>
        <rect x="50" y="50" width="100" height="100" fill="white"/>
        <text x="100" y="105" text-anchor="middle" font-family="Arial" font-size="12" fill="black">PIX</text>
        <text x="100" y="120" text-anchor="middle" font-family="Arial" font-size="8" fill="black">R$ ${finalTotal.toFixed(2)}</text>
      </svg>
    `)}`;
  };

  const handlePayment = () => {
    let message = '';
    
    switch (paymentMethod) {
      case 'card':
        message = 'Pagamento processado com sucesso! Seu pedido foi confirmado.';
        break;
      case 'cash':
        message = needsChange 
          ? `Pedido confirmado! Troco para R$ ${changeAmount}. Tempo estimado: 45 minutos.`
          : 'Pedido confirmado! Pagamento em dinheiro (valor exato). Tempo estimado: 45 minutos.';
        break;
      case 'pix':
        message = 'Aguardando confirmação do PIX. Seu pedido será processado após o pagamento.';
        break;
    }
    
    alert(message);
    dispatch({ type: 'CLEAR_CART' });
    dispatch({ type: 'TOGGLE_PAYMENT' });
    dispatch({ type: 'TOGGLE_CART' });
  };

  return (
    <div className="fixed inset-0 bg-black/70 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
      <div className="bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl max-w-md w-full max-h-[90vh] overflow-y-auto border border-amber-600/30 shadow-2xl">
        <div className="p-6 border-b border-amber-600/30">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-white">Pagamento</h2>
            <button
              onClick={() => dispatch({ type: 'TOGGLE_PAYMENT' })}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <X className="h-6 w-6" />
            </button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* Resumo do Pedido */}
          <div className="bg-gray-800/50 p-4 rounded-xl border border-amber-600/20">
            <h3 className="font-bold text-white mb-3">Resumo do Pedido</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between text-gray-300">
                <span>Subtotal:</span>
                <span>R$ {cartTotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-gray-300">
                <span>Taxa de entrega:</span>
                <span>R$ {deliveryFee.toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-lg font-bold border-t border-amber-600/30 pt-2">
                <span className="text-white">Total:</span>
                <span className="text-amber-400">R$ {finalTotal.toFixed(2)}</span>
              </div>
            </div>
          </div>

          {/* Métodos de Pagamento */}
          <div className="space-y-4">
            <h3 className="font-bold text-white">Forma de Pagamento</h3>
            
            <div className="space-y-3">
              {/* Cartão */}
              <button
                onClick={() => setPaymentMethod('card')}
                className={`w-full p-4 rounded-xl border transition-all duration-300 flex items-center space-x-3 ${
                  paymentMethod === 'card'
                    ? 'border-amber-500 bg-amber-600/20'
                    : 'border-gray-600 hover:border-amber-600/50 bg-gray-800/30'
                }`}
              >
                <CreditCard className="h-6 w-6 text-amber-400" />
                <div className="text-left">
                  <div className="font-bold text-white">Cartão de Crédito/Débito</div>
                  <div className="text-sm text-gray-300">Visa, Mastercard, Elo</div>
                </div>
              </button>

              {/* PIX */}
              <button
                onClick={() => setPaymentMethod('pix')}
                className={`w-full p-4 rounded-xl border transition-all duration-300 flex items-center space-x-3 ${
                  paymentMethod === 'pix'
                    ? 'border-amber-500 bg-amber-600/20'
                    : 'border-gray-600 hover:border-amber-600/50 bg-gray-800/30'
                }`}
              >
                <Smartphone className="h-6 w-6 text-amber-400" />
                <div className="text-left">
                  <div className="font-bold text-white">PIX</div>
                  <div className="text-sm text-gray-300">Pagamento instantâneo</div>
                </div>
              </button>

              {/* Dinheiro */}
              <button
                onClick={() => setPaymentMethod('cash')}
                className={`w-full p-4 rounded-xl border transition-all duration-300 flex items-center space-x-3 ${
                  paymentMethod === 'cash'
                    ? 'border-amber-500 bg-amber-600/20'
                    : 'border-gray-600 hover:border-amber-600/50 bg-gray-800/30'
                }`}
              >
                <Banknote className="h-6 w-6 text-amber-400" />
                <div className="text-left">
                  <div className="font-bold text-white">Dinheiro</div>
                  <div className="text-sm text-gray-300">Pagamento na entrega</div>
                </div>
              </button>
            </div>
          </div>

          {/* Formulários específicos por método */}
          {paymentMethod === 'card' && (
            <div className="space-y-4">
              <h4 className="font-bold text-white">Dados do Cartão</h4>
              <div className="space-y-3">
                <input
                  type="text"
                  placeholder="Número do cartão"
                  value={cardData.number}
                  onChange={(e) => setCardData({...cardData, number: e.target.value})}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-white"
                />
                <input
                  type="text"
                  placeholder="Nome no cartão"
                  value={cardData.name}
                  onChange={(e) => setCardData({...cardData, name: e.target.value})}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-white"
                />
                <div className="grid grid-cols-2 gap-3">
                  <input
                    type="text"
                    placeholder="MM/AA"
                    value={cardData.expiry}
                    onChange={(e) => setCardData({...cardData, expiry: e.target.value})}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-white"
                  />
                  <input
                    type="text"
                    placeholder="CVV"
                    value={cardData.cvv}
                    onChange={(e) => setCardData({...cardData, cvv: e.target.value})}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-white"
                  />
                </div>
              </div>
            </div>
          )}

          {paymentMethod === 'pix' && (
            <div className="space-y-4">
              <h4 className="font-bold text-white flex items-center space-x-2">
                <QrCode className="h-5 w-5" />
                <span>QR Code PIX</span>
              </h4>
              <div className="bg-white p-4 rounded-xl flex justify-center">
                <img 
                  src={generatePixQRCode()} 
                  alt="QR Code PIX" 
                  className="w-48 h-48"
                />
              </div>
              <div className="text-center">
                <p className="text-gray-300 text-sm">
                  Escaneie o QR Code com seu app do banco
                </p>
                <p className="text-amber-400 font-bold">
                  Valor: R$ {finalTotal.toFixed(2)}
                </p>
              </div>
            </div>
          )}

          {paymentMethod === 'cash' && (
            <div className="space-y-4">
              <h4 className="font-bold text-white">Opções para Dinheiro</h4>
              <div className="space-y-3">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={needsChange}
                    onChange={(e) => setNeedsChange(e.target.checked)}
                    className="w-5 h-5 text-amber-600 rounded border-amber-600/30 bg-gray-700"
                  />
                  <span className="text-white">Preciso de troco</span>
                </label>
                
                {needsChange && (
                  <input
                    type="number"
                    placeholder="Troco para quanto? (ex: 50.00)"
                    value={changeAmount}
                    onChange={(e) => setChangeAmount(e.target.value)}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-white"
                  />
                )}
                
                <div className="bg-amber-600/20 p-3 rounded-lg border border-amber-600/30">
                  <p className="text-amber-200 text-sm">
                    {needsChange 
                      ? `Troco: R$ ${changeAmount ? (parseFloat(changeAmount) - finalTotal).toFixed(2) : '0.00'}`
                      : `Valor exato: R$ ${finalTotal.toFixed(2)}`
                    }
                  </p>
                </div>
              </div>
            </div>
          )}

          <button
            onClick={handlePayment}
            disabled={
              (paymentMethod === 'card' && (!cardData.number || !cardData.name || !cardData.expiry || !cardData.cvv)) ||
              (paymentMethod === 'cash' && needsChange && (!changeAmount || parseFloat(changeAmount) < finalTotal))
            }
            className="w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 disabled:from-gray-600 disabled:to-gray-700 text-gray-900 disabled:text-gray-400 py-4 rounded-xl font-bold text-lg transition-all duration-300 shadow-lg hover:shadow-amber-500/30"
          >
            {paymentMethod === 'pix' ? 'Aguardar Pagamento PIX' : 'Confirmar Pedido'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default PaymentModal;